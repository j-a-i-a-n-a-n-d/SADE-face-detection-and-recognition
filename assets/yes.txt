
Ques 1 Find the roots of equation using the Quadratic Method


#include <math.h>
#include <stdio.h>
int main()
{
    printf("Name: JaiAnand\nUniversity Roll No.: 2016792\Semester: 5\nSection/Class Roll no.:B-51\n ");
    double a, b, c, discriminant, root1, root2, realPart, imagPart;
    printf("\n\nEnter coefficients a, b and c: ");
    scanf("%lf %lf %lf", &a, &b, &c);
    discriminant = b * b - 4 * a * c;
    if (discriminant > 0)
    {
        printf("\nRoots are real and Different:");
        root1 = (-b + sqrt(discriminant)) / (2 * a);
        root2 = (-b - sqrt(discriminant)) / (2 * a);
        printf("\n\t\troot1 = %.2lf\n\t\troot2 = %.2lf", root1, root2);
    }
    else if (discriminant == 0)
    {
        printf("Roots are Real And Eqaul:");
        root1 = root2 = -b / (2 * a);
        printf("\n\t\troot1 = root2 = %.2lf;", root1);
    }
    else
    {
        printf("Roots are complex and different:");
        realPart = -b / (2 * a);
        imagPart = sqrt(-discriminant) / (2 * a);
        printf("\n\t\troot1 = %.2lf+%.2lfi\n\t\troot2 = %.2f-%.2fi", realPart, imagPart, realPart, imagPart);
    }
    return 0;
}






PS D:\sadeMain> cd "c:\Users\dell\Downloads\" ; if ($?) { gcc quadratic.c -o quadratic } ; if ($?) { .\quadratic }
Name: JaiAnand
University Roll No.: 2016792
Semester: 5
Section/Class Roll no.: B-51
Enter coefficients a, b and c: 3 4 6
Roots are complex and different:
                root1 = -0.67+1.25i
                root2 = -0.67-1.25i



 
Q2) WAP in C to find the roots of equation using bisection method.


#include <math.h>
#include <stdio.h>
double f(double x) 
{
    return 3*x + sin(x) - exp(x) ;
}
int main() 
{
    double c = 0, x0, x1;
    int i=1;
    // calculating tolerance
    int noDigits = 4;
    double t = 0.5 * pow(10.0, -noDigits);
    x0 = 0;
    x1 = 0;
    printf("Name: Jai Anand\nSem: 5\nSec/Roll: B-51\nUniversity Roll: 2016792\n\n");
    printf("Function :  3x + sin(x) - exp(x) \n");
    while (f(x0) * f(x1) > 0 || x0 == x1) 
    {
        printf("Enter a valid range:: ");
        scanf("%lf %lf", &x0, &x1);
    }
    double x_prev = 0;

    printf("Iteration|    x0\t |    c\t\t |     x1\t |     f(c)\n\n");
    while (1) 
   {
        x_prev = c;
        c = (x0 + x1) / 2;
        printf("    %d\t |   %lf\t |   %lf\t |   %lf\t |   %lf\n",i, x0, c, x1, f(c));
        i++;
        if (f(c) == 0) {
            printf("\nResult is :: %lf", c);
            break;
        } 
       else if (f(x0) * f(c) < 0) 
            x1 = c;
        else 
            x0 = c;
        if (fabs(c - x_prev) <= t) 
       {
            printf("\n\nResult is :: %lf  within %lf tolerance\n\n", c, t);
            break; }
    }
    return 0;}

 


Enter a valid range:: 2
3
Enter a valid range:: 1
3
Iteration|    x0         |    c          |     x1        |     f(c)
    1    |   1.000000    |   2.000000    |   3.000000    |   -0.479759
    2    |   1.000000    |   1.500000    |   2.000000    |   1.015806
    3    |   1.500000    |   1.750000    |   2.000000    |   0.479383
    4    |   1.750000    |   1.875000    |   2.000000    |   0.058267
    5    |   1.875000    |   1.937500    |   2.000000    |   -0.195362
    6    |   1.875000    |   1.906250    |   1.937500    |   -0.064801
    7    |   1.875000    |   1.890625    |   1.906250    |   -0.002343
    8    |   1.875000    |   1.882813    |   1.890625    |   0.028192
    9    |   1.882813    |   1.886719    |   1.890625    |   0.012982
    10   |   1.886719    |   1.888672    |   1.890625    |   0.005334
    11   |   1.888672    |   1.889648    |   1.890625    |   0.001499
    12   |   1.889648    |   1.890137    |   1.890625    |   -0.000421
    13   |   1.889648    |   1.889893    |   1.890137    |   0.000539
    14   |   1.889893    |   1.890015    |   1.890137    |   0.000059
    15   |   1.890015    |   1.890076    |   1.890137    |   -0.000181
    16   |   1.890015    |   1.890045    |   1.890076    |   -0.000061
Result is :: 1.890045  within 0.000050 tolerance

 
Q3) WAP in C to find the roots of equation using Regular Falsi method.

#include <stdio.h>
#include <conio.h>
#include <math.h>
float f(float x)
{
    return ((x * x * x * x * x) - (4 * x * x * x * x) - (9 * x * x * x) + (12 * x * x) + 15 * x);
}
int main()
{
    printf("Name : Jai Anand \nSection : CS-B\nRoll No : 51\n");
    printf("|*******************************REGULAR FALSI method********************************************|\n");
    printf("-------------------------------------------------------------------------------------------------\n");
    int i;
    float x, a, b, t, y;
    x = 1;
    while (1)
    {
        if (f(x) * (f(x + 1)) < 0)
        {
            a = x;
            b = x + 1;
            break;
        }
        x++;
    }
    printf("|********************************Intital Roots Are**********************************************|\n");
    printf("-------------------------------------------------------------------------------------------------\n");
    printf("|i\t    a\t            b\t           F(a)\t           F(b)\t          (t-x)\t         x(root)|\n");
    printf("-------------------------------------------------------------------------------------------------\n");
    i = 1, t = 0;
    while (1)
    {
        if (i != 1)
            t = x;
        x = (a - (b - a) / (f(b) - f(a)) * f(a));
        if (f(x) == 0)
        {
            printf("Final Root =%f", x);
            break;
        }
        if (f(a) * f(b) < 0)
            b = x;
        else
            a = x;
        y = fabs(t - x);
        printf("|%d\t%f\t%f\t%f\t%f\t%f\t%f|\n", i, a, b, f(a), f(b), y, x);
        printf("-------------------------------------------------------------------------------------------------\n");
        if (y <= 0.0001)
        {
            printf("|                                                                          |Final Root =%f|\n", x);
            printf("-------------------------------------------------------------------------------------------------\n");
            break;
        }
        i = i + 1;
    }
    getch();
    return 0;
}




PS C:\Users\dell> cd "c:\Users\dell\Downloads\" ; if ($?) { gcc regulafalsi.c -o regulafalsi } ; if ($?) { .\regulafalsi }
Name : Jai Anand 
Section : CS-B
Roll No : 51
|*******************************REGULAR FALSI method********************************************|
-------------------------------------------------------------------------------------------------
|********************************Intital Roots Are**********************************************|
-------------------------------------------------------------------------------------------------
|i          a               b              F(a)            F(b)           (t-x)          x(root)|
-------------------------------------------------------------------------------------------------
|1      1.000000        1.365854        15.000000       10.774169       1.365854        1.365854|
-------------------------------------------------------------------------------------------------
|2      2.298633        1.365854        -58.921986      10.774169       0.932780        2.298633|
-------------------------------------------------------------------------------------------------
|3      2.298633        1.510050        -58.921986      6.077521        0.788583        1.510050|
-------------------------------------------------------------------------------------------------
|4      2.298633        1.583783        -58.921986      2.900125        0.073733        1.583783|
-------------------------------------------------------------------------------------------------
|5      2.298633        1.617317        -58.921986      1.272127        0.033534        1.617317|
-------------------------------------------------------------------------------------------------
|6      2.298633        1.631716        -58.921986      0.537233        0.014399        1.631716|
-------------------------------------------------------------------------------------------------
|7      2.298633        1.637742        -58.921986      0.223232        0.006026        1.637742|
-------------------------------------------------------------------------------------------------
|8      2.298633        1.640236        -58.921986      0.092128        0.002494        1.640236|
-------------------------------------------------------------------------------------------------
|9      2.298633        1.641264        -58.921986      0.037917        0.001028        1.641264|
-------------------------------------------------------------------------------------------------
|10     2.298633        1.641687        -58.921986      0.015589        0.000423        1.641687|
-------------------------------------------------------------------------------------------------
|11     2.298633        1.641861        -58.921986      0.006403        0.000174        1.641861|
-------------------------------------------------------------------------------------------------
|12     2.298633        1.641932        -58.921986      0.002628        0.000071        1.641932|
-------------------------------------------------------------------------------------------------
|                                                                          |Final Root =1.641932|
-------------------------------------------------------------------------------------------------




 
Q4) WAP in C to find the roots of equation using Newton Raphson Method.


#include <stdio.h>
#include <conio.h>
#include <math.h>
float f(float x)
{
    return ((x * x * x) - (4 * x) - 9);
}
float f2(float x)
{
    return ((3 * x * x) - 4);
}
int main()
{
    printf("Name : Jai Anand \nSection : CS-B\nRoll No : 51\n");
    printf("|*NEWTON RAPSON METHOD*|\n");
    printf("------------------------\n");
    int i;
    float x, a, b, t, y;
    x = 1;
    while (1)
    {
        if (f(x) * (f(x + 1)) < 0)
        {
            break;
        }
        x++;
    }
    printf("|**Intital Roots Are **|\n");
    printf("------------------------\n");
    printf("|i\t         ROOTS |\n");
    i = 1, t = 0;
    while (1)
    {
        if (i >= 1)
            t = x;
        x = x - f(t) / f2(t);
        if (f(x) == 0)
        {
            getch();
            return 0;
        }
        y = fabs(t - x);
        printf("-----------------------\n");
        if (y <= 0.0001)
        {
            printf("| Final Root =%f |\n", x);
            printf("-----------------------\n");
            break;
        }
        printf("|%d\t       %f|\n", i, x);
        i = i + 1;
    }
    getch();
    return 0;
}





PS C:\Users\dell> cd "c:\Users\dell\Downloads\" ; if ($?) { gcc newton.c -o newton } ; if ($?) { .\newton }
Name : Jai Anand 
Section : CS-B
Roll No : 51
|*NEWTON RAPSON METHOD*|
------------------------
|**Intital Roots Are **|
------------------------
|i               ROOTS |
-----------------------
|1             3.125000|
-----------------------
|2             2.768530|
-----------------------
|3             2.708196|
-----------------------
|4             2.706529|
-----------------------
| Final Root =2.706528 |
-----------------------










































Q5) WAP in C to solve equation in linear variables using gauss Elimination Method.


#include <stdio.h>
#include <conio.h>
#include <math.h>
#include <stdlib.h>
#define SIZE 10
int main()
{
    float a[SIZE][SIZE], x[SIZE], ratio;
    int i, j, k, n;
    printf("Jai Anand\nRoll NO 51\n University Roll No. 2016792\n");
    printf("Enter number of unknowns: ");
    scanf("%d", &n);
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n + 1; j++)
        {
            printf("a[%d][%d] = ", i, j);
            scanf("%f", &a[i][j]);
        }
    }
    for (i = 1; i <= n - 1; i++)
    {
        if (a[i][i] == 0.0)
        {
            printf("Mathematical Error!");
            exit(0);
        }
        for (j = i + 1; j <= n; j++)
        {
            ratio = a[j][i] / a[i][i];

            for (k = 1; k <= n + 1; k++)
            {
                a[j][k] = a[j][k] - ratio * a[i][k];
            }
        }
    }
    x[n] = a[n][n + 1] / a[n][n];

    for (i = n - 1; i >= 1; i--)
    {
        x[i] = a[i][n + 1];
        for (j = i + 1; j <= n; j++)
        {
            x[i] = x[i] - a[i][j] * x[j];
        }
        x[i] = x[i] / a[i][i];
    }
    printf("\nSolution:\n");
    for (i = 1; i <= n; i++)
    {
        printf("x[%d] = %0.3f\n", i, x[i]);
    }return (0);
}

PS D:\operating_system> cd "c:\Users\dell\Downloads\" ; if ($?) { gcc gauss.c -o gauss } ; if ($?) { .\gauss }
Jai Anand
Roll NO 51
 University Roll No. 2016792
Enter number of unknowns: 2
a[1][1] = 1
a[1][2] = 2
a[1][3] = 3
a[2][1] = 4
a[2][2] = 5
a[2][3] = 6

Solution:
x[1] = -1.000
x[2] = 2.000


EDGE CASE : 

PS C:\Users\dell\Downloads> cd "c:\Users\dell\Downloads\" ; if ($?) { gcc tempCodeRunnerFile.c -o tempCodeRunnerFile } ; if ($?) { .\tempCodeRunnerFile }
Jai Anand
Roll NO 51
 University Roll No. 2016792
Enter number of unknowns: 3
a[1][1] = 1  
a[1][2] = 1
a[1][3] = 1
a[1][4] = 2
a[2][1] = 2
a[2][2] = 2
a[2][3] = 3
a[2][4] = 3
a[3][1] = 3
a[3][2] = 4
a[3][3] = 4
a[3][4] = 4
Mathematical Error!
 
Write a C program to implement Gauss Jordan Method.

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
int main()
{
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement the Gauss Jordan Method.\n\n");
    printf("Enter the coefficients of the Augmented Matrix (row-wise) : \n");
    float a[3][4];
    int n = 4;
    for(int i = 0 ; i < 3; i++)
    {
        for(int j = 0 ; j < 4; j++)
            scanf("%f", &a[i][j]);
    }
    float first = a[0][0], div1 = a[1][0], div2 = a[2][0];
    for(int i = 0 ; i < 4; i++)
    {
        a[1][i] = a[0][i] - ((a[1][i]/div1) * first);
        a[2][i] = a[0][i] - ((a[2][i]/div2) * first);
    }
    first = a[1][1], div1 = a[0][1], div2 = a[2][1];
    for(int i = 0 ; i < 4; i++)
    {
        a[0][i] = a[1][i] - ((a[0][i]/div1) * first);
        a[2][i] = a[1][i] - ((a[2][i]/div2) * first);
    }
    first = a[2][2], div1 = a[0][2], div2 = a[1][2];
    for(int i = 0 ; i < 4; i++)
    {
        a[0][i] = a[2][i] - ((a[0][i]/div1) * first);
        a[1][i] = a[2][i] - ((a[1][i]/div2) * first);
    }
    printf("\nAfter Gauss Jordan : \n");
    for(int i = 0 ; i < 3; i++)
    {
        for(int j = 0 ; j < 4; j++)
        {
            printf("%.2f ", a[i][j]);
        }
        printf("\n");
    }
    float x = a[0][3]/a[0][0];
    float y = a[1][3]/a[1][1];
    float z = a[2][3]/a[2][2];
    printf("\nThe solution is: \n");
    printf("x : %.3f\n", x);
    printf("y : %.3f\n", y);
    printf("z : %.3f\n", z);
}









OUTPUT :


PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc gaussJordan.c -o gaussJordan } ; if ($?) { .\gaussJordan }
NAME - Jai Anand
SECTION - CS-B
U_RNO - 2016792
This is a program to implement the Gauss Jordan Method.

Enter the coefficients of the Augmented Matrix (row-wise) :
1 4 9 16
2 1 1 10
3 2 3 18

After Gauss Jordan :
0.14 0.00 0.00 0.98
0.00 -0.04 0.00 0.37
0.00 0.00 0.10 0.50

The solution is:
x : 7.000
y : -9.000
z : 5.000




































Write a C program to implement Newton Forward Interpolation.

#include<stdio.h>
int main()
{
    float x[20], y[20][20];
    int i, j, n;
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to display Newton Forward Interpolation \n");
    printf("\nEnter number of values : ");
    scanf("%d", &n);
    printf("\nEnter the values : \n");
    for (i = 0; i < n; i++)
    {
        printf("x[%d] = ", i);
        scanf("%f", &x[i]);
        printf("y[%d] = ", i);
        scanf("%f", &y[i][0]);
    }
    for (i = 1; i < n; i++)
    {
        for (j = 0; j < n - i; j++)
        {
            y[j][i] = y[j + 1][i - 1] - y[j][i - 1];
        }
    }
    printf("\nFORWARD DIFFERENCE TABLE\n\n");
    for (i = 0; i < n; i++)
    {
        printf("%0.2f", x[i]);
        for (j = 0; j < n - i; j++)
        {
            printf("\t%0.2f", y[i][j]);
        }
        printf("\n");
    }
    return 0;
}
























OUTPUT:

"c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc newtonForward.c -o newtonForward } ; if ($?) { .\newtonForward }
NAME - Jai Anand
SECTION - CS-B
U_RNO - 2016792
This is a program to display Newton Forward Interpolation

Enter number of values : 5

Enter the values :
x[0] = 1
y[0] = 2
x[1] = 4
y[1] = 5
x[2] = 2
y[2] = 1
x[3] = 2
y[3] = 3
x[4] = 10
y[4] = 23

FORWARD DIFFERENCE TABLE

1.00    2.00    3.00    -7.00   13.00   -1.00
4.00    5.00    -4.00   6.00    12.00
2.00    1.00    2.00    18.00
2.00    3.00    20.00
10.00   23.00






























Write a C program to implement Newton Backward Interpolation.

#include <stdio.h>
int main(){
     float x[20], y[20][20];
     int i, j, n;
     printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
     printf("This is a program to display Newton Forward Interpolation \n");
     printf("Enter number of values : ");
     scanf("%d", &n);
     printf("Enter values : \n");
     for (i = 0; i < n; i++)
     {
         printf("x[%d] = ", i);
         scanf("%f", &x[i]);
         printf("y[%d] = ", i);
         scanf("%f", &y[i][0]);
     }
     for (i = 1; i < n; i++){
         for (j = n - 1; j > i - 1; j--)
            y[j][i] = y[j][i - 1] - y[j - 1][i - 1];
     }
     printf("\nBACKWARD DIFFERENCE TABLE\n\n");
     for (i = 0; i < n; i++)
     {
         printf("%0.2f", x[i]);
         for (j = 0; j <= i; j++)
         {
            printf("\t%0.2f", y[i][j]);
         }
         printf("\n");
     }
     return 0;}

OUTPUT:
"c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc newtonBackward.c -o newtonBackward } ; if ($?) { .\newtonBackward }
NAME - Jai Anand
SECTION - CS-B
U_RNO - 2016792
This is a program to display Newton Forward Interpolation
Enter number of values : 5
Enter values :
x[0] = 1
y[0] = 3
x[1] = 4
y[1] = 2
x[2] = 5
y[2] = 1
x[3] = 2
y[3] = 3
x[4] = 9
y[4] = 10
BACKWARD DIFFERENCE TABLE
1.00    3.00
4.00    2.00    -1.00
5.00    1.00    -1.00   0.00
2.00    3.00    2.00    3.00    3.00
9.00    10.00   7.00    5.00    2.00    -1.00


Write a C program to implement Lagrange’s Interpolation Theorem.

#include <stdio.h>
#include <stdlib.h>
int main()
{
     int n;
     printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
     printf("This is a program to implement Lagrange's Interpolation \n");
     printf("\nEnter the number of terms : ");
     scanf("%d", &n);
     printf("Enter the value of x and y row-wise : \n");
     float x[n], y[n];
     for(int i = 0 ; i < n; i++)
     {
        scanf("%f %f", &x[i], &y[i]);
     }
     float f = 0, ans = 0, level = 1;
     printf("\nEnter the value of y for which f(x) is to be calculated : ");
     scanf("%f", &f);
     for(int i = 0 ; i < n; i++)
     {
        for(int j = 0; j < n; j++)
        {
            if(i != j)
            {
                level *= ((f - x[j])/(x[i] - x[j]));
            }
        }
        ans += (level*y[i]);
        level = 1;
     }
     printf("After applying Lagrange's Interpolation, value of f(%.2f) is : %.4f\n", f, ans);
}

OUTPUT:

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc lagrangeInterpolation.c -o lagrangeInterpolation } ; if ($?) { .\lagrangeInterpolation }
NAME - Jai Anand 
SECTION - CS-B 
U_RNO - 2016792
This is a program to implement Lagrange's Interpolation 

Enter the number of terms : 5
Enter the value of x and y row-wise : 
5 150
7 392
11 1452
13 2366
17 5202

Enter the value of y for which f(x) is to be calculated : 9
After applying Lagrange's Interpolation, value of f(9.00) is : 809.9999




Write a C program to implement Trapezoidal Rule.
#include <stdio.h>
#include <math.h>
#define f(x) 1 / (1 + pow(x, 2))
int main()
{
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement Trapezoidal Rule \n\n");
    printf("For the function f(x) = 1/(1 + x^2)\n");
    float lower, upper, integration = 0.0, stepSize, k;
    int i, subInterval;
    printf("Enter lower limit of integration : ");
    scanf("%f", &lower);
    printf("Enter upper limit of integration : ");
    scanf("%f", &upper);
    printf("Enter number of sub intervals : ");
    scanf("%d", &subInterval);

    stepSize = (upper - lower) / subInterval;

    integration = f(lower) + f(upper);
    for (i = 1; i <= subInterval - 1; i++)
    {
        k = lower + i * stepSize;
        integration = integration + (2 * f(k));
    }
    integration = integration * (stepSize / 2);
    printf("\nRequired value of integration using Trapezoidal Rule is : %.3f\n", integration);
    return 0;
}


OUTPUT

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc trapezoidal.c -o trapezoidal } ; if ($?) { .\trapezoidal }
NAME - Jai Anand 
SECTION - CS-B 
U_RNO - 2016792
This is a program to implement Trapezoidal Rule 

For the function f(x) = 1/(1 + x^2)
Enter lower limit of integration : 0
Enter upper limit of integration : 6
Enter number of sub intervals : 6

Required value of integration using Trapezoidal Rule is : 1.411







Write a C program to implement Simpson’s 1/8th Rule.

#include <stdio.h>
#include <conio.h>
#include <math.h>
#define f(x) 1 / (1 + x * x)
int main()
{
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement Simpson's 1/3rd Rule \n\n");
    printf("For the function f(x) = 1/(1 + x^2)\n");

    float lower, upper, integration = 0.0, stepSize, k;
    int i, subInterval;
    printf("Enter lower limit of integration : ");
    scanf("%f", &lower);
    printf("Enter upper limit of integration : ");
    scanf("%f", &upper);
    printf("Enter number of sub intervals : ");
    scanf("%d", &subInterval);
    stepSize = (upper - lower) / subInterval;
    integration = f(lower) + f(upper);
    for (i = 1; i <= subInterval - 1; i++)
    {
        k = lower + i * stepSize;
        if (i % 2 == 0)
        {
            integration = integration + 2 * f(k);
        }
        else
        {
            integration = integration + 4 * f(k);
        }
    }
    integration = integration * stepSize / 3;
    printf("\nRequired value of integration using Simpson's 1/3rd Rule is : %.3f\n", integration);
    return 0;
}

OUTPUT

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc simpson1-8.c -o simpson1-8 } ; if ($?) { .\simpson1-8 }
NAME - Jai Anand 
SECTION - CS-B 
U_RNO - 2016792
This is a program to implement Simpson's 1/3rd Rule 

For the function f(x) = 1/(1 + x^2)
Enter lower limit of integration : 0
Enter upper limit of integration : 6
Enter number of sub intervals : 6

Required value of integration using Simpson's 1/3rd Rule is : 1.366




Write a C program to implement Simpson’s 3/8th Rule.
#include <stdio.h>
#include <conio.h>
#include <math.h>
#define f(x) 1 / (1 + x * x)
int main()
{
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement Simpson's 1/3rd Rule \n\n");
    printf("For the function f(x) = 1/(1 + x^2)\n");
    float lower, upper, integration = 0.0, stepSize, k;
    int i, subInterval;
    printf("Enter lower limit of integration : ");
    scanf("%f", &lower);
    printf("Enter upper limit of integration : ");
    scanf("%f", &upper);
    printf("Enter number of sub intervals : ");
    scanf("%d", &subInterval);
    stepSize = (upper - lower) / subInterval;
    integration = f(lower) + f(upper);
    for (i = 1; i <= subInterval - 1; i++)
    {
        k = lower + i * stepSize;
        if (i % 3 == 0)
        {
            integration = integration + 2 * f(k);
        }
        else
        {
            integration = integration + 3 * f(k);
        }
    }
    integration = integration * stepSize * 3 / 8;
    printf("\nRequired value of integration is: %.3f", integration);
    return 0;
}

OUTPUT

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc simpson3-8.c -o simpson3-8 } ; if ($?) { .\simpson3-8 }
NAME - Jai Anand 
SECTION - CS-B 
U_RNO - 2016792
This is a program to implement Simpson's 1/3rd Rule 

For the function f(x) = 1/(1 + x^2)
Enter lower limit of integration : 0
Enter upper limit of integration : 6
Enter number of sub intervals : 6

Required value of integration is: 1.357



Write a Program in C to implement Runge Kutta Method for 4th order Integrals.

#include <stdio.h>
#include <math.h>
float f(float x, float y)
{
    return (x - y) / (x + y);
}
int main()
{
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement Runge Kutta Method\n\n");
    float x0, y0, m1, m2, m3, m4, m, y, x, h, xn;
    printf("Enter x0,y0,xn,h:");
    scanf("%f %f %f %f", &x0, &y0, &xn, &h);
    x = x0;
    y = y0;
    printf("\n\nX\t\tY\n");
    while (x < xn)
    {
        m1 = f(x0, y0);
        m2 = f((x0 + h / 2.0), (y0 + m1 * h / 2.0));
        m3 = f((x0 + h / 2.0), (y0 + m2 * h / 2.0));
        m4 = f((x0 + h), (y0 + m3 * h));
        m = ((m1 + 2 * m2 + 2 * m3 + m4) / 6);
        yn = y0 + m ;
        x0 = x0 + h;
		y0 = yn
        printf("%f\t%f\n", x, y);
    }
}

Output :

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc rk.c -o rk } ; if ($?) { .\rk }
NAME - Jai Anand 
SECTION - CS-B 
U_RNO - 2016792
This is a program to implement Runge Kutta Method

Enter x0,y0,xn,h:1 7 19 2


X               Y
3.000000        5.944493
5.000000        4.888987
7.000000        3.833480
9.000000        2.777974
11.000000       1.722467
13.000000       0.666961
15.000000       -0.388546
17.000000       -1.444052
19.000000       -2.499559






Write a Program In C to implement The Euler’s Method.

#include <stdio.h>
#include <conio.h>
#define f(x, y) x + y
int main()
{
    float x0, y0, xn, h, yn, slope;
    int i, n;
    printf("NAME - Jai Anand \nSECTION - CS-B \nU_RNO - 2016792\n");
    printf("This is a program to implement Runge Kutta Method\n\n");
    printf("Enter Initial Condition\n");
    printf("x0 = ");
    scanf("%f", &x0);
    printf("y0 = ");
    scanf("%f", &y0);
    printf("Enter calculation point xn = ");
    scanf("%f", &xn);
    printf("Enter number of steps: ");
    scanf("%d", &n);
    h = (xn - x0) / n;
    printf("\nx0\ty0\tslope\tyn\n");
    printf("------------------------------\n");
    for (i = 0; i < n; i++)
    {
        slope = f(x0, y0);
        yn = y0 + h * slope;
        printf("%.4f\t%.4f\t%0.4f\t%.4f\n", x0, y0, slope, yn);
        y0 = yn;
        x0 = x0 + h;
    }
    printf("\nValue of y at x = %0.2f is %0.3f", xn, yn);
    return 0;
}



























Output :

PS C:\Users\dell\Desktop\cbnst> cd "c:\Users\dell\Desktop\cbnst\jaiAnandCbnst\" ; if ($?) { gcc eulersMethod.c -o eulersMethod } ; if ($?) { .\eulersMethod }
NAME - Jai Anand
SECTION - CS-B
U_RNO - 2016792
This is a program to implement Runge Kutta Method

Enter Initial Condition
x0 = 0 
y0 = 2
Enter calculation point xn = 2
Enter number of steps: 10

x0      y0      slope   yn
------------------------------
0.0000  2.0000  2.0000  2.4000
0.2000  2.4000  2.6000  2.9200
0.4000  2.9200  3.3200  3.5840
0.6000  3.5840  4.1840  4.4208
0.8000  4.4208  5.2208  5.4650
1.0000  5.4650  6.4650  6.7580
1.2000  6.7580  7.9580  8.3495
1.4000  8.3495  9.7495  10.2995
1.6000  10.2995 11.8995 12.6793
1.8000  12.6793 14.4793 15.5752

Value of y at x = 2.00 is 15.575


